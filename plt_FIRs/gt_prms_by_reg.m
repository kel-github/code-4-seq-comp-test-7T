function info = gt_prms_by_reg(PLACE, info)
%% written by K.Garner, 2020
% for each condition x mask x 3rd of the data, 
% extract the parameter values from the relevant voxels
% each third and region will have a different number of voxels
% add to info a region sized structure, each containing a substructure for
% each third, each of these contains a parameter x voxels x condition matrix
% save to a parameter x condition x region mat file
% save mat file and info for use by the plotting function (nxt)

% inputs
% PLACE = where is your data? give the name of your data storage system to
% load the correct template file paths and to load library functions
% info = the information structure generated by mk_int_msks.m (see in this
% folder) 

%% set paths and define variables

switch PLACE
    case 'inode'
        %spms = '/scratch/qbi/uqkgarn1/STRIWP1/derivatives/glmFIR/sub-%s/TR%s/FLGLM/SPM.mat';
        datloc =  '/scratch/qbi/uqkgarn1/STRIWP1/derivatives/glmFIR/sub-%s/TR%s/FLGLM/PARAMS/';
        addpath('/scratch/qbi/uqkgarn1/spm12/spm12')
end
sub = info.sub;
TR = info.TR;
betamsks = info.betamsks;
muparams = info.muparams;
cidx = info.conds;

%% for each region (size(betamsks, 2)) go through each threshold mask (size(betamsks(1).name,2)
% for each parameter and condition
% read in the voxels of interest and add to the parameter x voxels x
% condition matrix
nregions = size(betamsks, 2);
nthrsh = size(betamsks(1).name,2);
nfs = size(muparams, 2);
cond_ref = nfs/max(cidx);
cidx = repelem(unique(cidx(cidx>0)), cond_ref);
f = 'i1.*i2';
flg.dtype = info.flg.dtype;

for iReg = 1:nregions
    for iMsk = 1:nthrsh
        
        % unzip the mask of interest
        msk = gunzip(betamsks(iReg).name(iMsk).crits);
        V = spm_vol(msk{1});
        for iIm = 1:nfs
           % go through the images, extract the values and save 
            im = muparams(iIm).name;
            im = gunzip(im);
            V(2) = spm_vol(im{1});
            % now extract the voxels of interest
            vx = spm_imcalc(V, [V(1).fname(1:end-5) 'tmp.nii'], f, flg);
            
            % now read in the volume data, and collect data of interest 
            vxdat = niftiread(vx.fname);
            vxdat = vxdat(~isnan(vxdat) & abs(vxdat)>0);
            if iIm == 1
               dat = zeros(size(vxdat, 1),  cond_ref, max(cidx)); 
            end
            if iIm <= cond_ref
                dat(:,iIm,cidx(iIm)) = vxdat;
            else
                dat(:,(iIm-cond_ref),cidx(iIm)) = vxdat;
            end
            % if the last image, then add the data to the betamsks structure
            betamsks(iReg).name(iMsk).dat = dat;
            
        end        
    end
end

% return betamsks to the info structure
info.betamsks = betamsks;

%% save the info structure and rsync to p's folder, for future reference
sname = sprintf([datloc, 'sub-%s_TR%s_FIR_prms-reg-by-cond.mat'], sub, TR, sub, TR);
save(sname, 'info');

%% clear up unwanted .nii files
delete(sprintf([datloc '*.nii'],sub, TR)); 

end