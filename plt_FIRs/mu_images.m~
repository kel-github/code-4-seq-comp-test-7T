function [] = mu_images(PLACE, info, out_name)
%% writvten by K.Garner, 2020
% idea of this function is to average across the images, the criteria of
% which is set by 'op' (see below), using SPM_imcalc, and to save the resulting images
% with a meaningful filename

% inputs
% PLACE = where is your data? give the name of your data storage system to
% load the correct template file paths and to load library functions
% info = the information structure generated by def_pars.m (see in this
% folder)
% out_name = the name for the mean image, will be saved in the same
% location as the beta images

%% start here by defining path parameters et al
switch PLACE
    case 'inode'
        spms = '/scratch/qbi/uqkgarn1/STRIWP1/derivatives/glmFIR/sub-%s/TR%s/FLGLM/SPM.mat';
        dat =  '/scratch/qbi/uqkgarn1/STRIWP1/derivatives/glmFIR/sub-%s/TR%s/FLGLM/PARAMS/';
        addpath('/opt/ohpc/pub/apps/spm12')
end

cidx = info.conds;
sidx = info.sessions;
peaks = info.peaks;

%% select files of interest
% idea here is to find the 
fn = 'beta_000%d.nii.gz'; % filename template
fs = dir([sprintf(dat, sub, TR), 'beta*.nii.gz']); % get list of files
% now sanity check we have the right number of files
if (size(fs,1) ~= length(cidx))
    msg = sprintf('wrong number of beta images for sub %s, TR %s!', sub, TR);
    error(msg)
end

% now find images that pertain to all peaks, across sessions and across
% conditions
ims = [];
for iconds = 1:max(cidx)
    for isess = 1:max(sidx)
        tmp = find(cidx == iconds & sidx == isess);
        ims = [ims, tmp(peaks)];
    end
end

%% unzip relevant files, collect as a variable
for iIms = 1:length(ims)
    thisIm = [fs(ims(iIms)).folder '/' fs(ims(iIms)).name];
    gunzip(thisIm);
end
fs = dir([sprintf(dat, sub, TR), 'beta*.nii']); 

%% collate filenames and read in using spm_vol
vols = [];
for ifs = 1:size(fs,1)
   vols = [vols; [fs(ifs).folder '/' fs(ifs).name]];
end
Vs = spm_vol(vols);    

%% define imcalc function
% now that we know which images shoould contain the peak response,
% we can now generate the spm function for computing the average
f = [];
for iIms = 1:length(ims)
    if iIms < length(ims)
        f = [f, sprintf('i%d+', iIms)];
    else
        f= [f, sprintf('i%d', iIms)];
    end
end
f = [f, sprintf('/%d', length(ims))];

%% run imcalc
flg.dtype = 16; % to keep data as single, see spm_type
out_file = [
spm_imcalc(Vs, out_file, f, flg);

end